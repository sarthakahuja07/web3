{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./PriceConvertor.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nerror notOwnerError();\r\n\r\ncontract FundMe {\r\n    using PriceConvertor for uint256;\r\n\r\n    uint256 public constant MIN_USD = 1 * 1e18;\r\n    address[] public funders;\r\n    mapping(address => uint256) public addressToFunds;\r\n    address public immutable owner;\r\n    AggregatorV3Interface private priceFeed;\r\n\r\n    constructor(address priceFeedAddress) {\r\n        owner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    modifier isOwner() {\r\n        // require(msg.sender == owner, \"only owner can call this function\");\r\n        if (msg.sender != owner) {\r\n            revert notOwnerError();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function fund() public payable {\r\n        require(\r\n            msg.value.getConversionRate(priceFeed) > MIN_USD,\r\n            \"minimum of 10USD needed\"\r\n        );\r\n        funders.push(msg.sender);\r\n        addressToFunds[msg.sender] += msg.value;\r\n    }\r\n\r\n    function withdraw() public isOwner {\r\n        for (uint i = 0; i < funders.length; i++) {\r\n            address founderAddress = funders[i];\r\n            addressToFunds[founderAddress] = 0;\r\n        }\r\n        funders = new address[](0);\r\n        //  to transfer - 3 methods - send,transfer, call\r\n        // payable(msg.sender).transfer(address(this).balance);\r\n\r\n        // payable(msg.sender).send(address(this).balance);\r\n\r\n        (bool success, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(success, \"withdraw failed\");\r\n    }\r\n\r\n    function getFundsFromAdrress(address funder) public view returns (uint256) {\r\n        return addressToFunds[funder];\r\n    }\r\n\r\n    receive() external payable {\r\n        fund();\r\n    }\r\n\r\n    fallback() external payable {\r\n        fund();\r\n    }\r\n}\r\n"
    },
    "contracts/PriceConvertor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConvertor {\r\n    function getPrice(AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        (, int price, , , ) = priceFeed.latestRoundData();\r\n        return uint256(price * 1e10);\r\n    }\r\n\r\n    function getConversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 priceInUSD = (ethPrice * ethAmount) / 1e18;\r\n        return priceInUSD;\r\n    }\r\n}\r\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}